{"version":3,"file":"plasmic-lite-embed.cjs.production.min.js","sources":["../src/lite-embed.tsx","../src/index.tsx"],"sourcesContent":["import {\n  ComponentMeta,\n} from \"@plasmicapp/host\";\n\nimport React from \"react\";\nimport { VimeoLite, YoutubeLite } from \"@lite-embed/react\";\nexport function ensure<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    debugger;\n    throw new Error(`Value must not be undefined or null`);\n  } else {\n    return x;\n  }\n}\n\nconst modulePath = \"@plasmicpkgs/plasmic-lite-embed\";\n\n\ninterface LiteEmbedProps {\n  service?: string,\n  urlOrId?: string;\n  adNetwork?: boolean;\n  className?: string;\n\n}\n\nexport const LiteEmbedMeta: ComponentMeta<LiteEmbedProps> = {\n  name: \"LiteEmbed\",\n  displayName: \"Lite Embed\",\n  importName: \"LiteEmbed\",\n  importPath: modulePath,\n  providesData: true,\n  description:\n    \"Embedding YouTube and Vimeo  videon on your website\",\n\n  props: {\n\n    service: {\n      type: \"choice\",\n      options: [\"Vimeo\", \"Youtube\"],\n    },\n    urlOrId: {\n      type: \"string\",\n\n      displayName: \"Video url or Id\",\n      description:\n        \"Id or url of the video which you want to embed\",\n    },\n    adNetwork: {\n      type: \"boolean\",\n      displayName: \"Ads\",\n      description:\n        \"By default the ads are disabled to respect the privacy of the users. You can enable them by setting this to true\",\n      defaultValue: false,\n    },\n  },\n};\n\nexport function LiteEmbed({\n  service,\n  urlOrId,\n  adNetwork,\n  className,\n}: LiteEmbedProps) {\n\n  let video;\n\n  if (!urlOrId) {\n    return <div>Please enter URL or ID of the video</div>\n  }\n\n  if (service === 'Vimeo') {\n    video = (\n\n      <VimeoLite urlOrId={urlOrId!} adNetwork={adNetwork} ></VimeoLite>\n    )\n  } else {\n    video = (\n\n      <YoutubeLite urlOrId={urlOrId!} adNetwork={adNetwork} ></YoutubeLite>\n    )\n  }\n\n  return (\n    <div className={className}>{video}</div>\n  );\n}\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext from \"@plasmicapp/host/registerGlobalContext\";\nimport {\n\n  LiteEmbed,\n  LiteEmbedMeta,\n} from \"./lite-embed\";\n\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  if (loader) {\n\n\n    _registerComponent(LiteEmbed, LiteEmbedMeta);\n\n  }\n\n}\nexport * from \"./lite-embed\";"],"names":["LiteEmbedMeta","name","displayName","importName","importPath","providesData","description","props","service","type","options","urlOrId","adNetwork","defaultValue","LiteEmbed","video","className","React","VimeoLite","YoutubeLite","x","Error","loader","Component","defaultMeta","registerComponent"],"mappings":"sPA0BaA,EAA+C,CAC1DC,KAAM,YACNC,YAAa,aACbC,WAAY,YACZC,WAfiB,kCAgBjBC,cAAc,EACdC,YACE,sDAEFC,MAAO,CAELC,QAAS,CACPC,KAAM,SACNC,QAAS,CAAC,QAAS,YAErBC,QAAS,CACPF,KAAM,SAENP,YAAa,kBACbI,YACE,kDAEJM,UAAW,CACTH,KAAM,UACNP,YAAa,MACbI,YACE,mHACFO,cAAc,cAKJC,SAOVC,EALJJ,IAAAA,QAEAK,IAAAA,iBAKKL,GAKHI,EAEEE,gBAHY,YAZhBT,QAeKU,YAKAC,eALUR,QAASA,EAAUC,YAblCA,YAuBEK,uBAAKD,UAAWA,GAAYD,IAhBrBE,sIA9DeG,MACpBA,MAAAA,QAEI,IAAIC,oDAEHD,gCCAiBE,OAKxBC,EACAC,EASEF,IAVFC,EAamBT,EAZnBU,EAY8BxB,EAV1BsB,EACFA,EAAOG,kBAAkBF,EAAWC,GAEpCC,EAAkBF,EAAWC"}